//////// DO NOT EDIT THIS FILE - it is machine generated ////////

#include "CpseisShft.hh"

//------------------ fortran spelling adjustments --------------------//
//------------------ fortran spelling adjustments --------------------//
//------------------ fortran spelling adjustments --------------------//

#if NEED_UNDERSCORE
#define shft_wrap_create             shft_wrap_create_
#define shft_wrap_delete             shft_wrap_delete_
#define shft_wrap_update             shft_wrap_update_
#define shft_wrap_wrapup             shft_wrap_wrapup_
#define shft_wrap_oneset             shft_wrap_oneset_
#define shft_wrap_twosets            shft_wrap_twosets_
#elif NEED_CAPITALS
#define shft_wrap_create             SHFT_WRAP_CREATE
#define shft_wrap_delete             SHFT_WRAP_DELETE
#define shft_wrap_update             SHFT_WRAP_UPDATE
#define shft_wrap_wrapup             SHFT_WRAP_WRAPUP
#define shft_wrap_oneset             SHFT_WRAP_ONESET
#define shft_wrap_twosets            SHFT_WRAP_TWOSETS
#endif

//----------------------- fortran prototypes -------------------------//
//----------------------- fortran prototypes -------------------------//
//----------------------- fortran prototypes -------------------------//

extern "C"
    {
    CpseisBase::ModuleCreate   shft_wrap_create;
    CpseisBase::ModuleDestroy  shft_wrap_delete;
    CpseisBase::ModuleUpdate   shft_wrap_update;
    CpseisBase::ModuleWrapup   shft_wrap_wrapup;
    CpseisBase::ModuleOneset   shft_wrap_oneset;
    CpseisBase::ModuleTwosets  shft_wrap_twosets;
    }

//------------------------ constructor -------------------------------//
//------------------------ constructor -------------------------------//
//------------------------ constructor -------------------------------//

CpseisShft::CpseisShft() : CpseisBase ("SHFT",
                                       shft_wrap_create,
                                       shft_wrap_delete,
                                       shft_wrap_update,
                                       shft_wrap_wrapup,
                                       shft_wrap_oneset,
                                       shft_wrap_twosets) {}

//------------------------------ end ---------------------------------//
//------------------------------ end ---------------------------------//
//------------------------------ end ---------------------------------//
