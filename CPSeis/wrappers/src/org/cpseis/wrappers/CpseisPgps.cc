//////// DO NOT EDIT THIS FILE - it is machine generated ////////

#include "CpseisPgps.hh"

//------------------ fortran spelling adjustments --------------------//
//------------------ fortran spelling adjustments --------------------//
//------------------ fortran spelling adjustments --------------------//

#if NEED_UNDERSCORE
#define pgps_wrap_create             pgps_wrap_create_
#define pgps_wrap_delete             pgps_wrap_delete_
#define pgps_wrap_update             pgps_wrap_update_
#define pgps_wrap_wrapup             pgps_wrap_wrapup_
#define pgps_wrap_oneset             pgps_wrap_oneset_
#define pgps_wrap_twosets            pgps_wrap_twosets_
#elif NEED_CAPITALS
#define pgps_wrap_create             PGPS_WRAP_CREATE
#define pgps_wrap_delete             PGPS_WRAP_DELETE
#define pgps_wrap_update             PGPS_WRAP_UPDATE
#define pgps_wrap_wrapup             PGPS_WRAP_WRAPUP
#define pgps_wrap_oneset             PGPS_WRAP_ONESET
#define pgps_wrap_twosets            PGPS_WRAP_TWOSETS
#endif

//----------------------- fortran prototypes -------------------------//
//----------------------- fortran prototypes -------------------------//
//----------------------- fortran prototypes -------------------------//

extern "C"
    {
    CpseisBase::ModuleCreate   pgps_wrap_create;
    CpseisBase::ModuleDestroy  pgps_wrap_delete;
    CpseisBase::ModuleUpdate   pgps_wrap_update;
    CpseisBase::ModuleWrapup   pgps_wrap_wrapup;
    CpseisBase::ModuleOneset   pgps_wrap_oneset;
    CpseisBase::ModuleTwosets  pgps_wrap_twosets;
    }

//------------------------ constructor -------------------------------//
//------------------------ constructor -------------------------------//
//------------------------ constructor -------------------------------//

CpseisPgps::CpseisPgps() : CpseisBase ("PGPS",
                                       pgps_wrap_create,
                                       pgps_wrap_delete,
                                       pgps_wrap_update,
                                       pgps_wrap_wrapup,
                                       pgps_wrap_oneset,
                                       pgps_wrap_twosets) {}

//------------------------------ end ---------------------------------//
//------------------------------ end ---------------------------------//
//------------------------------ end ---------------------------------//
