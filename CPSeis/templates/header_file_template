/****
!!!                         Header File Template
!!!
!!!-----------------------------------------------------------------------------
!!!                   REVISION HISTORY FOR THIS TEMPLATE
!!!
!!!     Date        Author     Description
!!!     ----        ------     -----------
!!!  8. 2002-10-23  Stoeckley  Minor documentation improvements.
!!!  7. 2002-05-16  Stoeckley  Add brief doc section.
!!!  6. 2001-10-22  Stoeckley  Uncomment some items; add code check-in
!!!                             instructions.
!!!  5. 1999-11-09  Stoeckley  Moved location of prolog line so DOC will work.
!!!  4. 1999-10-04  Goodger    Backed off revision 3.
!!!  2. 1999-09-20  Stoeckley  Remove some documentation tags and add
!!!                             reference to other files.
!!!  1. 1999-09-10  Stoeckley  Initial version.
!!!
!!!-----------------------------------------------------------------------------
!!!                         GENERAL INFORMATION
!!!
!!! This template for C-language header files constitutes part of the
!!! standards for writing primitive modules for the Conoco Processing System.
!!! This template, including the instructions and comments within this
!!! template, is to be used for creating the header files for all C-language
!!! implementation files which contain functions called from C or C++.
!!! Each such C-language implementation file which needs a header file should
!!! have its own header file.  Header files should not be shared between
!!! separate implementation files.
!!!
!!! C-language implementation files fall into the following categories:
!!!
!!!  (1) C-language primitives to be called from C or C++ only.
!!!  (2) C-language primitives to be called from C or C++ or Fortran.
!!!  (3) C-language primitives to be called from Fortran only.
!!!  (4) C-language auxiliary files which are part of a Fortran process
!!!         or primitive and are called only from the Fortran code in the
!!!         process or primitive.
!!!  (5) C-language wrapper files which are part of a Fortran process or
!!!         primitive and are called from C or C++ as an interface to the
!!!         the Fortran process or primitive.
!!!
!!! Header files are normally needed only when the functions in the
!!! implementation file are to be called from C or C++.  If the functions
!!! in the implementation file are to be called only from Fortran, all
!!! information which would otherwise be in a header file should reside
!!! at the top of the implementation file.
!!!
!!! All of the instructions, comments, and sample code in this template are
!!! commented out with /**** and ****/ and marked with three exclamation
!!! points to allow new code to be inserted and tested without having to
!!! delete this information first.
!!!
!!!-----------------------------------------------------------------------------
!!!                         SUPPORTING DOCUMENTS
!!!
!!! (1) Documentation accessed by the CPSDOC program.
!!! (2) Templates for processes and primitives            (in ~sps/templates).
!!! (3) Coding Standards for Mixing Programming Languages (in ~sps/templates).
!!!
!!!-----------------------------------------------------------------------------
!!!                       INITIAL STEPS TO PERFORM
!!!
!!! (1) Copy this template to a new file with the name "xxxx.h" where
!!!     "xxxx" is the name of your C-language primitive.
!!!
!!! (2) Make the following replacements in this template wherever they occur:
!!!     Replace  xxxx or XXXX  with the primitive name.
!!!     Replace  2001-01-01    with the current check-in date (year-month-day).
!!!     Replace      NNNN      with your name.
!!!
!!! (3) Insert your code into this template at locations where instructions
!!!     are found.  Make sure all inserted code conforms to the appropriate
!!!     standards, including naming conventions.
!!!
!!! (4) All documentation for this primitive, except for the brief doc and
!!!     revision history of this header file, is to be included in the
!!!     implementation file (xxxx.c) for this primitive.  A separate template
!!!     is available for the implementation file.
!!!
!!! (5) Delete all instructions, comments, and sample code (lines beginning
!!!     with !!!) in this file.
!!!
!!!-----------------------------------------------------------------------------
!!!                       CODE CHECK-IN INSTRUCTIONS
!!!
!!! (1) Test the code thoroughly until you believe that it is ready
!!!     for BETA TESTING if it is to be placed into betalib, or ALPHA
!!!     TESTING if it is to be placed into alphalib.
!!!
!!! (2) Make sure the code compiles and works on all available compilers.
!!!
!!! (3) Make sure a new entry has been added to the revision history, and
!!!     set this entry to the current check-in date.
!!!
!!! (4) Check in the new code before 3:00 p.m.
!!!
!!!-----------------------------------------------------------------------------
****/


/****
!<CPS_v1 type="HEADER_FILE"/>
****/
/*------------------------------- xxxx.h ----------------------------------*/
/*------------------------------- xxxx.h ----------------------------------*/
/*------------------------------- xxxx.h ----------------------------------*/

    /* other files are:  xxxx.f90  xxxx.c  xxxx_frou.f90  xxxx_crou.c */
 
/****
!!! --> Delete from the above list any other files which do NOT exist.
!!! --> There should usually be an xxxx.c or xxxx_crou.c file.
!!! --> Omit the above line if there are no other files.
****/


/****
!<copyright>
!*******************************************************************************
!***********                    COPYRIGHT NOTICE                     ***********
!*********** CONFIDENTIAL AND PROPRIETARY INFORMATION OF CONOCO INC. ***********
!***********  PROTECTED BY THE COPYRIGHT LAW AS AN UNPUBLISHED WORK  ***********
!*******************************************************************************
!</copyright>


!<brief_doc>
!-------------------------------------------------------------------------------
!                      C P S   H E A D E R   F I L E
!
! Name       : XXXX
! Category   : --> should match the main file of this primitive.
! Written    : 2001-01-01   by: NNNN
! Revised    : 2001-01-01   by: NNNN
! Maturity   : beta
! Purpose    : --> should match the main file of this primitive.
! Portability: No known limitations.
!
!-------------------------------------------------------------------------------
!</brief_doc>


!<history_doc>
!-------------------------------------------------------------------------------
!                       HEADER FILE REVISION HISTORY
!
!     Date        Author       Description
!     ----        ------       -----------
!  1. 2001-01-01  NNNN         Initial version.
!
!!!  --> This revision history should pertain only to this header file.
!!!  --> The revision history in the corresponding implementation file
!!!  --> should pertain only to the implementation file.
!!!
!!!  --> The revision history should be listed in descending order, with
!!!  --> the most recent revision at the top.
!
!-------------------------------------------------------------------------------
!</history_doc>
****/


/*--------------------------- start of coding ------------------------------*/
/*--------------------------- start of coding ------------------------------*/
/*--------------------------- start of coding ------------------------------*/


#ifndef _XXXX_H_
#define _XXXX_H_


#include "named_constants.h"
#include "c2f_interface.h"

/****
!!!
!!! Include any required header files here, such as the above examples.
!!! Do not include header files here if they are needed only in the
!!! implementation file - put them in the implementation file instead.
!!! If you need any standard C library header files here, you can find
!!! a list in the auxiliary_clanguage_template.
!!!
!!! If any functions prototyped in this header file are to be called from
!!! Fortran, you will need to include the C2F_INTERFACE header file above,
!!! plus pre-compiler directives like those shown below.  And you will 
!!! need to use variable types REAL, INTEGER, and DOUBLE (defined in the
!!! C2F_INTERFACE header file) to facilitate portability across platforms
!!! for data types passed between C and Fortran.  See the documentation
!!! in c2f_interface.h for further information.
!!!
****/

#ifdef NEED_UNDERSCORE
#define xxxx_sub1   xxxx_sub1_       <-- replace with actual subroutine name.
#define xxxx_sub2   xxxx_sub2_       <-- replace with actual subroutine name.
#define xxxx_sub3   xxxx_sub3_       <-- replace with actual subroutine name.
#elif defined NEED_CAPITALS
#define xxxx_sub1   XXXX_SUB1        <-- replace with actual subroutine name.
#define xxxx_sub2   XXXX_SUB2        <-- replace with actual subroutine name.
#define xxxx_sub3   XXXX_SUB3        <-- replace with actual subroutine name.
#endif


#ifdef __cplusplus
extern "C" {
#endif


/*------------------------ start of prototypes ---------------------------*/
/*------------------------ start of prototypes ---------------------------*/
/*------------------------ start of prototypes ---------------------------*/


/****
!!! Put all required definitions and prototypes here.
!!! You can make more than one section if they are large.
!!! Always use complete prototypes (with full argument lists).
!!!
!!! Here are some sample prototypes:
!!!
!!!      float    xxxx_sub1 (void);
!!!      void     xxxx_sub2 (void);
!!!      int      xxxx_sub3 (int aaa, float bbb);
!!!
!!!      REAL     xxxx_sub1 ();
!!!      void     xxxx_sub2 ();
!!!      INTEGER  xxxx_sub3 (INTEGER *aaa, REAL *bbb);
!!!
!!! If this primitive is to be called ONLY from Fortran and never from C,
!!! a header file is not necessary and all code which would normally reside
!!! in the header file can reside in the implementation file instead.
!!! The #ifdef tests for C++ and separate prototypes can be omitted in
!!! such cases.
!!!
!!! If this primitive is to be called from Fortran, it is a good idea to
!!! create a Fortran-90 wrapper around this primitive to be called from
!!! Fortran.  This wrapper, called xxxx_wrapper.f90, should contain a
!!! Fortran-90 module called xxxx_module containing explicit interface blocks
!!! for all C routines to be called from Fortran.  That wrapper should
!!! contain full documentation like any other Fortran primitive.  A separate
!!! template is available for this purpose.
****/


/*------------------------- end of prototypes ---------------------------*/
/*------------------------- end of prototypes ---------------------------*/
/*------------------------- end of prototypes ---------------------------*/


#ifdef __cplusplus
}
#endif


#endif


/*-------------------------------- end ------------------------------------*/
/*-------------------------------- end ------------------------------------*/
/*-------------------------------- end ------------------------------------*/

