/*<license>
 -------------------------------------------------------------------------------
  Copyright (c) 2007 ConocoPhillips Company
 
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
 
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
 
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 -------------------------------------------------------------------------------
 </license>*/

//------------------------ refraction_data.hh ---------------------//
//------------------------ refraction_data.hh ---------------------//
//------------------------ refraction_data.hh ---------------------//

//           header file for the RefractionData class
//               derived from the BaseData class
//                      subdirectory data

 
#ifndef _REFRACTION_DATA_HH_
#define _REFRACTION_DATA_HH_

#include "oprim/base_data.hh"
#include "cprim.h"

typedef void  RefrMsgFun   (void *msgdata, char *msg);
typedef void *RefrTfOpen   (char *tf, long *nwords, long *ntraces);
typedef long  RefrTfRead   (void *glbl, float head[]);
typedef long  RefrTfRewind (void *glbl);
typedef long  RefrTfClose  (void *glbl);


class RefractionData : public BaseData
{

//------------------------ data -------------------------------//
//------------------------ data -------------------------------//
//------------------------ data -------------------------------//

private:   // variables set by the constructor

  ScrsStruct *_ss; // pointer to opaque SCRS pickfile structure.
  int   _error;    // whether construction was successful (TRUE or FALSE).
  long  _status1;  // status of file1.
  long  _status2;  // status of file2.
  long  _status3;  // status of the two files together.
  char  _msg1[200]; // message describing file1.
  char  _msg2[200]; // message describing file2.
  char  _msg3[200]; // message describing both files together.
  char  _errmsg[200];   // message describing construction error.
  char  _filename[200]; // name of working file.

private:

  long  _id_constant;   // constant to use when creating ids.
  int   _needs_saving;  // whether current shot record needs saving.

//------------------------ functions -------------------------//
//------------------------ functions -------------------------//
//------------------------ functions -------------------------//

public:   // constructor and destructor

  RefractionData(const char *filename1, const char *filename2 = NULL,
        int required1 = TRUE, int required2 = FALSE,
        RefrMsgFun *msgfun = NULL, void *msgdata = NULL,
        long typegp = SEQU, const char *tracefile = NULL,
        RefrTfOpen *tf_open = NULL, RefrTfRead *tf_read = NULL,
        RefrTfRewind *tf_rewind = NULL, RefrTfClose *tf_close = NULL,
        int tf_pickhead = -1);

  virtual ~RefractionData();

public:   // get information generated by the constructor

  int         constructionError   ()  const  { return _error   ; }
  long        file1Status         ()  const  { return _status1 ; }
  long        file2Status         ()  const  { return _status2 ; }
  long        file3Status         ()  const  { return _status3 ; }
  const char *file1Message        ()  const  { return _msg1    ; }
  const char *file2Message        ()  const  { return _msg2    ; }
  const char *file3Message        ()  const  { return _msg3    ; }
  const char *constructionMessage ()  const  { return _errmsg  ; }
  const char *workingFilename     ()  const  { return _filename; }

public:          // derived from BaseData
 
  virtual int   getNumPts       (long id = defaultId);
  virtual float getX     (int i, long id = defaultId);
  virtual float getY     (int i, long id = defaultId);
  virtual float getZ     (int i, long id = defaultId);

private:         // private id helpers

  long createId       (long igrp, int id_which);
  int  getWhichFromId (long id);
  long getGroupFromId (long id);

public:          // get ids

  long idXrecPicksElev   (long igrp);
  long idYrecPicksElev   (long igrp);
  long idXrecElevPicks   (long igrp);
  long idYrecElevPicks   (long igrp);
  long idXrecOffsetPicks (long igrp);
  long idYrecOffsetPicks (long igrp);

  long idXrecYrecPicks   (long igrp);
  long idXrecYrecElev    (long igrp);
  long idXrecYrecOffset  (long igrp);

  long idShots  ();
  long idElev   ();
  long idDepth  ();
  long idUptime ();

public:          // read or write one record

  int  readHeaderRecord ();
  int writeHeaderRecord ();

  int  readNextShotRecord ();
  int writeNextShotRecord ();

  int  readShotRecord (long igroup);
  int writeShotRecord (long igroup);

  int  readTailRecord ();
  int writeTailRecord ();

public:      // get general information

  long  numberOfShotRecords      () const;
  long  numberOfChannels         () const;
  long  firstShotRecord          () const;
  long  lastShotRecord           () const;
  long  latestModifiedShotRecord () const;
  long  nearestShotRecord (long igroup, long adjustment) const;

public:      // get and set header information

  int  getHeaderValues (long *ngrp, long *incgp, float *rinc,
                        long *nch, float *trsh, char *izc);

  int  setHeaderValues (long  ngrp, long  incgp, float  rinc,
                        long  nch, float  trsh, char *izc);

  int  getLimits (long *itmax, long *mxxgp, long *mxygp,
                               long *mnxgp, long *mnygp, long *mxo);

  int  setLimits (long  itmax, long  mxxgp, long  mxygp,
                               long  mnxgp, long  mnygp, long  mxo);

  int  getPickWindows (long *nxpw, long *nypw, long *npwoff,
                       long *ipkwhx, long *ipkwhy,
                       float *xpw, float *ypw, float *pkwn);

  int  setPickWindows (long  nxpw, long  nypw, long  npwoff,
                       long  ipkwhx, long  ipkwhy,
                       float *xpw, float *ypw, float *pkwn);

public:      // get and set shot record information

  int   needsSaving         () const  { return _needs_saving; }

  long  getShotRecordNumber () const;
  long  getSourceXgp        () const;
  long  getSourceYgp        () const;
  long  getSourceElevation  () const;
  long  getSourceDepth      () const;
  float getSourceUpholeTime () const;

  void  setShotRecordNumber (long  igroup       );
  void  setSourceXgp        (long  source_xgp   );
  void  setSourceYgp        (long  source_ygp   );
  void  setSourceElevation  (long  source_elev  );
  void  setSourceDepth      (long  source_depth );
  void  setSourceUpholeTime (float source_uptime);

  float getPickTime           (long ich) const;
  long  getReceiverXgp        (long ich) const;
  long  getReceiverYgp        (long ich) const;
  long  getReceiverElevation  (long ich) const;
  long  getOffset             (long ich) const;

  void  getPickTimes          (float *picks    ) const;
  void  getReceiverXgps       (long  *rec_xgps ) const;
  void  getReceiverYgps       (long  *rec_ygps ) const;
  void  getReceiverElevations (long  *rec_elevs) const;
  void  getOffsets            (long  *offsets  ) const;

  void  setPickTimes          (float *picks    );
  void  setReceiverXgps       (long  *rec_xgps );
  void  setReceiverYgps       (long  *rec_ygps );
  void  setReceiverElevations (long  *rec_elevs);
  void  setOffsets            (long  *offsets  );

  int setPicksByTraceHeaders(float *head, long nwords, float *picks);
  int setPickByTraceHeader  (float *head, long nwords, float  pick, long ich);

public:          // read or write picks for CBYT

  int  readPicks     (const float *head, long nwords,
                         long ntraces, float *picks);
  int  writePicks    (const float *head, long nwords,
                         long ntraces, float *picks);
  int  readPrevPicks (const float *head, long nwords,
                         long ntraces, float *picks, long align);
  int  readNextPicks (const float *head, long nwords,
                         long ntraces, float *picks, long align);
  int  readSelPicks  (const float *head, long nwords,
                         long ntraces, float *picks, long align, long grp);

public:   // static methods to check files

  static long checkValidity (char *filename, char *info,
                             long *ngrp, long *nch);

  static void checkValidities (char *filename1, char *filename2,
                               long *valid1, long *valid2,
                               char *info1, char *info2,
                               long *same_datasets);

  static void checkValiditiesAlternative (void *data,
                              char *filename1, char *filename2,
                              long *valid1, long *valid2,
                              char *info1, char *info2,
                              long *same_datasets);

  static long inquire (char *filename1, char *filename2,
                       int required1, int required2,
                       char *msg1, char *msg2, char *msg3,
                       long *status1, long *status2);

//---------------------- end of functions -----------------------//
//---------------------- end of functions -----------------------//
//---------------------- end of functions -----------------------//

} ;

#endif

//---------------------------- end --------------------------------//
//---------------------------- end --------------------------------//
//---------------------------- end --------------------------------//
