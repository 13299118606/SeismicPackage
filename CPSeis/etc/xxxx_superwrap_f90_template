!!------------------------ xxxx_superwrap.f90 -------------------------!!
!!------------------------ xxxx_superwrap.f90 -------------------------!!
!!------------------------ xxxx_superwrap.f90 -------------------------!!


!*******************************************************************************
!*******                        COPYRIGHT NOTICE                         *******
!******* CONFIDENTIAL AND PROPRIETARY INFORMATION OF CONOCOPHILLIPS INC. *******
!*******      PROTECTED BY THE COPYRIGHT LAW AS AN UNPUBLISHED WORK      *******
!*******************************************************************************

             !!!!!!!! this file is automatically generated !!!!!!!!

!!------------------------------ module -----------------------------------!!
!!------------------------------ module -----------------------------------!!
!!------------------------------ module -----------------------------------!!

      module xxxx_superwrap_module
      use xxxx_module
      implicit none
      public

      type :: xxxx_superwrap_struct
        type(xxxx_struct),pointer :: obj
      end type xxxx_superwrap_struct

      end module xxxx_superwrap_module

!!------------------------------ rcs --------------------------------------!!
!!------------------------------ rcs --------------------------------------!!
!!------------------------------ rcs --------------------------------------!!

      subroutine xxxx_superwrap_rcs (ident)
      use xxxx_superwrap_module
      implicit none
      character(len=*),intent(out) :: ident                     ! argument

      ident = xxxx_ident

      end subroutine xxxx_superwrap_rcs

!!---------------------------- create ------------------------------------!!
!!---------------------------- create ------------------------------------!!
!!---------------------------- create ------------------------------------!!

      subroutine xxxx_superwrap_create (fpoint)  
      use xxxx_superwrap_module
      implicit none
      type(xxxx_superwrap_struct),intent(out)   :: fpoint
      type(xxxx_struct)          ,pointer       :: obj           ! local

      call xxxx_create (obj)
      fpoint%obj => obj

      end subroutine xxxx_superwrap_create

!!---------------------------- delete ------------------------------------!!
!!---------------------------- delete ------------------------------------!!
!!---------------------------- delete ------------------------------------!!

      subroutine xxxx_superwrap_delete (fpoint)   
      use xxxx_superwrap_module
      implicit none
      type(xxxx_superwrap_struct),intent(inout) :: fpoint
      type(xxxx_struct)          ,pointer       :: obj           ! local

      obj => fpoint%obj
      if (.not. associated(obj)) return
      call xxxx_delete (obj)
      fpoint%obj => obj

      end subroutine xxxx_superwrap_delete

!!------------------------------- init ------------------------------------!!
!!------------------------------- init ------------------------------------!!
!!------------------------------- init ------------------------------------!!

      subroutine xxxx_superwrap_init (fpoint)      
      use xxxx_superwrap_module
      implicit none
      type(xxxx_superwrap_struct),intent(inout) :: fpoint
      type(xxxx_struct)          ,pointer       :: obj           ! local

      obj => fpoint%obj
      if (.not. associated(obj)) return
      call xxxx_initialize (obj)

      end subroutine xxxx_superwrap_init

!!---------------------------- update ------------------------------------!!
!!---------------------------- update ------------------------------------!!
!!---------------------------- update ------------------------------------!!

      subroutine xxxx_superwrap_update (fpoint)     
      use xxxx_superwrap_module
      implicit none
      type(xxxx_superwrap_struct),intent(inout) :: fpoint
      type(xxxx_struct)          ,pointer       :: obj           ! local

      obj => fpoint%obj
      if (.not. associated(obj)) return
      call xxxx_update (obj)

      end subroutine xxxx_superwrap_update

!!---------------------------- wrapup ------------------------------------!!
!!---------------------------- wrapup ------------------------------------!!
!!---------------------------- wrapup ------------------------------------!!

      subroutine xxxx_superwrap_wrapup (fpoint)      
      use xxxx_superwrap_module
      implicit none
      type(xxxx_superwrap_struct),intent(inout) :: fpoint
      type(xxxx_struct)          ,pointer       :: obj           ! local

      obj => fpoint%obj
      if (.not. associated(obj)) return
      call xxxx_wrapup (obj)

      end subroutine xxxx_superwrap_wrapup

!!---------------------------- oneset ------------------------------------!!
!!---------------------------- oneset ------------------------------------!!
!!---------------------------- oneset ------------------------------------!!

      subroutine xxxx_superwrap_oneset (fpoint,ntr,  &
                                        hd,tr,lenhd,lentr,num)
      use xxxx_superwrap_module
      implicit none
      type(xxxx_superwrap_struct),intent(inout) :: fpoint
      integer                    ,intent(in)    :: lenhd,lentr,num  ! argument
      integer                    ,intent(inout) :: ntr              ! argument
      double precision           ,intent(inout) :: hd(lenhd,num)    ! argument
      real                       ,intent(inout) :: tr(lentr,num)    ! argument
      type(xxxx_struct)          ,pointer       :: obj              ! local

      obj => fpoint%obj
      if (.not. associated(obj)) return
1111  call xxxx (obj,ntr,hd,tr)                ! might be commented out.

      end subroutine xxxx_superwrap_oneset

!!---------------------------- twosets ------------------------------------!!
!!---------------------------- twosets ------------------------------------!!
!!---------------------------- twosets ------------------------------------!!

      subroutine xxxx_superwrap_twosets (fpoint,ntr,                 &
                                         hd1,tr1,lenhd1,lentr1,num1, &
                                         hd2,tr2,lenhd2,lentr2,num2)
      use xxxx_superwrap_module
      implicit none
      type(xxxx_superwrap_struct),intent(inout) :: fpoint
      integer                    ,intent(in)    :: lenhd1,lentr1,num1 ! argument
      integer                    ,intent(in)    :: lenhd2,lentr2,num2 ! argument
      integer                    ,intent(inout) :: ntr                ! argument
      double precision           ,intent(inout) :: hd1(lenhd1,num1)   ! argument
      real                       ,intent(inout) :: tr1(lentr1,num1)   ! argument
      double precision           ,intent(inout) :: hd2(lenhd2,num2)   ! argument
      real                       ,intent(inout) :: tr2(lentr2,num2)   ! argument
      type(xxxx_struct)          ,pointer       :: obj                ! local

      obj => fpoint%obj
      if (.not. associated(obj)) return
2222  call xxxx (obj,ntr,hd1,tr1,hd2,tr2)      ! might be commented out.

      end subroutine xxxx_superwrap_twosets

!!----------------------------- end ---------------------------------------!!
!!----------------------------- end ---------------------------------------!!
!!----------------------------- end ---------------------------------------!!
