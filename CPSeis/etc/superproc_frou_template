!<CPS_v1 type="AUXILIARY_FILE"/>
!!-------------------------- superproc_frou.f90 -----------------------------!!
!!-------------------------- superproc_frou.f90 -----------------------------!!
!!-------------------------- superproc_frou.f90 -----------------------------!!

     ! other files are:  superproc.f90  superproc_crou.c  superproc_crou.h

!<copyright>
!*******************************************************************************
!***********                    COPYRIGHT NOTICE                     ***********
!*********** CONFIDENTIAL AND PROPRIETARY INFORMATION OF CONOCO INC. ***********
!***********  PROTECTED BY THE COPYRIGHT LAW AS AN UNPUBLISHED WORK  ***********
!*******************************************************************************
!</copyright>


!<brief_doc>
!-------------------------------------------------------------------------------
!                        C P S  P R I M I T I V E
!
! Name       : SUPERPROC_FROU
! Category   : cfe
! Written    : 2003-11-03   by: Tom Stoeckley
! Revised    : 2003-11-04   by: Tom Stoeckley
!!!!MATURITY
! Purpose    : CFE Super Process Object Module.
! Portability: No known limitations, but see note with superproc_frou_list.
!
! Automatically generated by program SPS_BUILD_SUPERPROC.
! Automatically generated using SUPERPROC_FROU_TEMPLATE.
! Dates and revision history refer to revisions of SUPERPROC_FROU_TEMPLATE.
!
!-------------------------------------------------------------------------------
!</brief_doc>


!<history_doc>
!-------------------------------------------------------------------------------
!                           REVISION HISTORY
!
!     Date        Author     Description
!     ----        ------     -----------
!  2. 2003-11-04  Stoeckley  Add MATURITY key.
!  1. 2003-11-03  Stoeckley  Initial version of SUPERPROC_FROU_TEMPLATE.
!
!-------------------------------------------------------------------------------
!</history_doc>


!!-------------------------- process list ----------------------------------!!
!!-------------------------- process list ----------------------------------!!
!!-------------------------- process list ----------------------------------!!


!<process_list>
!!!!LIST
!</process_list>


!!------------------------------- module ----------------------------------!!
!!------------------------------- module ----------------------------------!!
!!------------------------------- module ----------------------------------!!


      module superproc_frou_module
      use named_constants_module
      use string_module
      implicit none
      public

      character(len=100),public,save :: SUPERPROC_FROU_IDENT = &
'$Id: superproc_frou_template,v 1.2 2003/11/04 16:52:50 Stoeckley production sps $'

      integer,parameter,public   :: SUPERPROC_PRODUCTION = 1
      integer,parameter,public   :: SUPERPROC_BETA       = 2
      integer,parameter,public   :: SUPERPROC_ALPHA      = 3
      integer,parameter,public   :: SUPERPROC_RAW        = 4
!!!!LEN_ALL
      integer,parameter,public   :: LEN_CHAR             = 99

      type :: superproc_proclist_struct
        character(len=LEN_CHAR) :: process
        character(len=LEN_CHAR) :: category
        integer                 :: maturity
      end type superproc_proclist_struct

      type(superproc_proclist_struct),save :: all(LEN_ALL)
      integer                        ,save :: view = SUPERPROC_BETA
      logical                        ,save :: first_time = .TRUE.

      end module superproc_frou_module


!!-------------------------- private list -----------------------------!!
!!-------------------------- private list -----------------------------!!
!!-------------------------- private list -----------------------------!!


      subroutine superproc_frou_private_list
      use superproc_frou_module
      implicit none

!!!!LOADLIST
      first_time = .FALSE.

      end subroutine superproc_frou_private_list


!!------------------------------ nlist -----------------------------------!!
!!------------------------------ nlist -----------------------------------!!
!!------------------------------ nlist -----------------------------------!!


      subroutine superproc_frou_nlist (nprocess_list,category)
      use superproc_frou_module
      implicit none
      integer         ,intent(out)         :: nprocess_list       ! argument
      character(len=*),intent(in)          :: category            ! argument
      integer                              :: i                   ! local

      if (first_time) call superproc_frou_private_list

      nprocess_list = 0

      select case (category)
        case ('ALL_PROCESSES')
          do i=1,LEN_ALL
            if (view >= all(i)%maturity) nprocess_list = nprocess_list + 1
          enddo

        case default
          do i=1,LEN_ALL
            if (all(i)%category == category .and.    &
                view >= all(i)%maturity) nprocess_list = nprocess_list + 1
          enddo
      end select

      end subroutine superproc_frou_nlist


!!------------------------------ list -----------------------------------!!
!!------------------------------ list -----------------------------------!!
!!------------------------------ list -----------------------------------!!

       ! Note: The Portland Group compiler requires process_list below
       ! to be declared with (:) rather than (*) in order for the code
       ! to work.  Therefore, since the subroutines in this file are
       ! intentionally called without an explicit interface, an explicit
       ! interface for this subroutine must be placed into the superproc.f90
       ! file.

      subroutine superproc_frou_list (process_list,category)
      use superproc_frou_module
      implicit none
      character(len=*),intent(out)         :: process_list(:)     ! argument
      character(len=*),intent(in)          :: category            ! argument
      integer                              :: i,n                 ! local

      if (first_time) call superproc_frou_private_list

      n = 0

      select case (category)
        case ('ALL_PROCESSES')
            do i=1,LEN_ALL
              if (view >= all(i)%maturity) then
                n = n + 1
                process_list(n) = all(i)%process
              endif
            enddo

        case default
            do i=1,LEN_ALL
              if (all(i)%category == category .and.  &
                  view >= all(i)%maturity) then
                n = n + 1
                process_list(n) = all(i)%process
              endif
            enddo
      end select

      end subroutine superproc_frou_list


!!------------------------------ validate ----------------------------------!!
!!------------------------------ validate ----------------------------------!!
!!------------------------------ validate ----------------------------------!!


      subroutine superproc_frou_validate (name,valid)
      use superproc_frou_module
      implicit none
      character(len=*),intent(in)      :: name                 ! argument
      logical         ,intent(out)     :: valid                ! argument
      integer                          :: i                    ! local

      if (first_time) call superproc_frou_private_list

      valid = .false.
      do i=1,LEN_ALL
        if (all(i)%process == name .and.  &
            view >= all(i)%maturity) then
          valid = .true.
          exit
        endif
      enddo

      end subroutine superproc_frou_validate


!!------------------------------- set view ---------------------------------!!
!!------------------------------- set view ---------------------------------!!
!!------------------------------- set view ---------------------------------!!


      subroutine superproc_frou_set_view (desired_view)
      use superproc_frou_module
      implicit none
      integer,intent(in)        :: desired_view                  ! argument

      if (desired_view >= SUPERPROC_PRODUCTION .and. &
          desired_view <= SUPERPROC_RAW) then
        view = desired_view
      endif

      end subroutine superproc_frou_set_view


!!------------------------------- get rcs ident ----------------------------!!
!!------------------------------- get rcs ident ----------------------------!!
!!------------------------------- get rcs ident ----------------------------!!


      subroutine superproc_frou_get_rcs_ident (name, ident)
      use superproc_frou_module
      implicit none
      character(len=*)          ,intent(in)    :: name          ! argument
      character(len=*)          ,intent(out)   :: ident         ! argument

      select case (name)

!!!!IDENT

      case default; ident = 'invalid process '//name
                    print *, "Invalid process "//trim(name)
      end select

      end subroutine superproc_frou_get_rcs_ident


!!--------------------------------- end ------------------------------------!!
!!--------------------------------- end ------------------------------------!!
!!--------------------------------- end ------------------------------------!!

