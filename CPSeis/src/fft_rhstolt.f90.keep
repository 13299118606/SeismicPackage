
! mixed radix code from R.H.Stolt converted to fortran 90

!!FFT_RHS!
! ***************************************************************************
      SUBROUTINE FFT_CMFFT(BI, BO, NLN, ISIGN)
!-----------------------------------------------
!   M o d u l e s
!-----------------------------------------------
!...Translated by Pacific-Sierra Research 77to90  4.4E      09:07:05   8/10/99
!...Switches: olen=80 INDAL=2 -x6r
!-----------------------------------------------
!   I n t e r f a c e      B l o c k s
!-----------------------------------------------
      IMPLICIT NONE
!-----------------------------------------------
!   D u m m y      A r g u m e n t s
!-----------------------------------------------
      integer  :: NLN
      integer , INTENT(IN) :: ISIGN
      real , INTENT(IN) :: BI(*)
      real , INTENT(INOUT) :: BO(*)

      integer :: NFAC, M2, M3, M4, M5, MFAC
      COMMON /NFCTRPA/ NFAC, M2, M3, M4, M5, MFAC( 12 )
      integer ::  FFT_NFCTR

!-----------------------------------------------
!   L o c a l      V a r i a b l e s
!-----------------------------------------------
      integer :: N, ND, NH, IREV, IFWD, MPC, MPF, JFAC, NA, IPASS, M, NAD, NAN&
      , K, IND0, IND1, IND2, IND3, IND4
      real :: SGN, CS3, SN3, CS51, SN51, CS52, SN52, TMPR, TMPI, TR1, TI1, TR2&
      , TI2, TTR, TSR, TR3, TI3, TR4, TI4, TRBP, TIBM
      DOUBLE  PRECISION XPR, XPI, DXPR, DXPI, XPR2, XPI2, XPR3,&
       XPI3, XPR4, XPI4 , DARG, DTMP, TWOPI
!     INTEGER :: VISIT=0
!     SAVE VISIT
!-----------------------------------------------
!***************************** COPYRIGHT NOTICE *****************************
!*              *
!*       CONFIDENTIAL AND PROPRIETARY INFORMATION      *
!*             OF CONOCO INC.           *
!*            PROTECTED BY THE COPYRIGHT LAW         *
!*         AS AN UNPUBLISHED WORK      *
!*              *
!****************************************************************************
!\USER DOC
!-----------------------------------------------------------------------
!
!      EXPLORATION RESEARCH AND SERVICES DIVISION
!             CONOCO, INC.
!
!  Process Name:  FFT_CMFFT, FFT_RMFFT, FFT_NFCTR
!      Author:      R. H. Stolt
!  Last Revised:  2000/01/17
!
!  Purpose:  FFT_CMFFT performs a mixed radix FFT on complex data. Its
!         companion FFT_RMFFT performs a mixed radix FFT on real data.
!         The routines are written in generic FORTRAN so as to be
!         usable on any host computer, including CRAYs, VAXes, PCs,
!         and workstations, without recourse to software packages
!         which may not be available on all machines.      FFT_NFCTR is a
!         supporting function which finds the next multiple of 2s,
!         3s, and 5s larger than a given number.
!
!-----------------------------------------------------------------------
!         INPUT PARAMETERS
!   See Program Documentation
!-----------------------------------------------------------------------
!   These subroutines are re-enterable
!-----------------------------------------------------------------------
!            NOTES
!
!  1. These routines differ from "standard" FFTs in that they do not
!     require data length to be a power of two.       They do require that
!     data length NLN be a product of 2s, 3s, and 5s; i.e., that
!          NLN = 2^M2 * 3^M3 * 5^M5.
!     Not all the exponents need be nonzero; however, for FFT_CMFFT, M2
!     must be nonzero (that is, NLN must be even) and for FFT_RMFFT, M2
!     must be larger than one (that is, NLN must be divisible by four).
!
!  2. If, on entry to FFT_CMFFT or FFT_RMFFT, NLN does not meet the above
!     requirements, it is replaced by the smallest bigger number which
!     does, and the input data extended to the new NLN by appending
!     zeroes.
!
!  3. The smallest even multiple of 2s, 3s, and 5s can be found
!     prior to calling the FFTs by calling the function FFT_NFCTR:
!         NLN = FFT_NFCTR( N ),
!     where N is the minimum required FFT length.  For FFT_RMFFT, the
!     number to find is
!         NLN = 2 * FFT_NFCTR ( (N+1)/2 ).
!     This makes NLN a multiple of 4, which is required because FFT_RMFFT
!     calls FFT_CMFFT with NLN = NLN/2.
!
!  4. Sizes of BI and BO are as follows:
!     _____________________________________
!     |          | CMFFT | RMFFT |      RMFFT |
!     |          |          | ISIGN=1 | ISIGN=-1|
!     |___________________________________|
!     | BI  | 2*NLN |  NLN+2 |       NLN   |
!     |          |          |  |   |
!     | BO  | 2*NLN |      NLN |  NLN+2  |
!     |___________________________________|
!
!     For FFT_RMFFT, the frequency-domain array contains only positive
!     frequencies 0 through NLN/2; FFT_CMFFT contains positive and negative
!     in the order 0,1,...,NLN/2-1,+-NLN/2,-NLN/2+1,...,-1.
!
!  5. Scaling. Both FFT_CMFFT and FFT_RMFFT are scaled so that a forward FFT
!     followed by an inverse FFT multiplies the data by NLN.  That is,
!     to recover the datas original scale factor, multiply each
!     element by 1./FLOAT( NLN ).  I did not provide a routine to do
!     this for you, so you will have to do it yourself.
!
!  6. Why do mixed radix FFTs?
!     a) You can use shorter arrays.  A 1025 length array can be
!      accomodated by a mixed radix length of 1080; the nearest
!      power of two is 2048.
!     b) Its faster.  It turns out that for a given length, the mixed
!      radix FFT, if equivalently optimized, will be a little faster.
!      This is mainly because radix-four FFTs go like gangbusters.
!      Threes and fives are a little slower, but not too bad, so the
!      net result for most numbers is some improvement.
!
!  7. Is there a reason not to?
!      FFT_CMFFT has a lot more code to it than a simple power-of-two
!      FFT, hence hogs more memory.  It also requires separate
!      arrays for input and output data.
!
!  8. Where is the SINE-COSINE table?
!      These routines generate their exponents as they need them.  A
!      SINE-COSINE table would decrease execution times by 5 to 8
!      percent, which was not in my judgment a sufficient incentive
!      to use them.  They are a pain for the user to generate and
!      keep track of, especially when doing multi-dimensional FFTs.
!
!  9. Why didnt I use a single array for input and output?
!      Thats      harder to do for mixed radix transforms.  The bit-
!      reversal step required in a power-of-two FFT becomes a factor-
!      order reversal in the mixed-radix case.      The former is a
!      simple transposition of pairs of data elements; the latter
!      mapping is not a transposition, and I did not see an easy
!      and messless way to perform it in place.       Sorry.
!-----------------------------------------------------------------------
! \END DOC
!\PROG DOC
!-----------------------------------------------------------------------
!        REVISION HISTORY
! 99/08/10     Converted to fortran 90
! 91/07/30     Reduced number of scratch variables in FFT_CMFFT, added zero
!           padding to inverse FFT_RMFFT.
! 91/07/30     Touched up double precision to satisfy CRAY compiler.
! 91/07/31     Removed some inessential integer variables.
!-----------------------------------------------------------------------
!        CALLING SEQUENCE
!
!   SUBROUTINE FFT_CMFFT ( BI, BO, NLN, ISIGN )
!   SUBROUTINE FFT_RMFFT ( BI, BO, NLN, ISIGN )
!   INTEGER FUNCTION FFT_NFCTR ( NLN )
!
!     BI    =  INPUT ARRAY (Complex for FFT_CMFFT and FFT_RMFFT with ISIGN
!           set to 1; real for FFT_RMFFT with ISIGN set to -1)
!     BO    =  OUTPUT ARRAY (Complex for FFT_CMFFT and for FFT_RMFFT if
!           ISIGN = -1; real for FFT_RMFFT if ISIGN = 1)
!     NLN   =  ARRAY LENGTH
!     ISIGN =  SIGN OF EXPONENT IN TRANSFORM.  FOR A FORWARD FFT,
!           ISIGN = - 1.  FOR INVERSE, ISIGN = 1.
!     FFT_NFCTR =  SMALLEST EVEN PRODUCT OF 2S, 3S, AND 5S WHICH
!           CONTAINS NLN
!
!-----------------------------------------------------------------------
!            NOTES
!
!  1. NFCTR hides more parameters in common block /NFCTRPA/.  They are
!      NFAC  -- Number of factors in NFCTR
!      M2, M3, M4, M5 --  Number of 2s, 3s, 4s, and 5s in NFCTR,
!        respectively.       (M4 is always chosen so that M2 < 2.)
!      MFAC(12) -- MFAC(J) is the Jth factor in NFCTR. Thus,
!        each factor is a 5, 4, 3, or 2.  They are ordered so that
!        5s      come before 4s, etc.  Note that MFAC allows for only
!        twelve factors, so the largest FFT these routines can
!        reliably perform without modification is 354,294.
!
!-----------------------------------------------------------------------
!     LIST OF ALL SUBROUTINE, FUNCTION, ENTRY AND COMMON BLOCK NAMES
!           IN THIS MODULE
! Subroutines:
!      FFT_RMFFT,      FFT_CMFFT
! Functions:
!      FFT_NFCTR
!
!-----------------------------------------------------------------------
!        LIST OF ALL EXTERNALS REFERENCED BY THIS MODULE
!
!     DCOS      DSIN  DASIN
!-----------------------------------------------------------------------
!        MEMORY REQUIREMENTS
! Storage   -  none
! Scratch   -  none
! Parms          -  none
!-----------------------------------------------------------------------
!\END DOC
!

!
!   FFT OF SINGLE COMPLEX TRACE
!   DB       = INPUT DATA ARRAY
!   DA       = OUTPUT DATA ARRAY
!   NLN        = ARRAY LENGTH
!   ISIGN = SENSE OF FFT
!     LENGTH N OF FFT IS PRODUCT OF FACTORS:
!      N = MFAC(1) * MFAC(2) * ... * MFAC(NFAC)
!     THE FACTORS MFAC(J) CAN BE 2S, 3S, 4S, AND 5S, AND MUST INCLUDE
!     AT LEAST ONE TWO OR FOUR.       THE PROGRAM WILL PICK THE SMALLEST SUCH
!     N NOT SMALLER THAN NLN.  IF NLN < N, DATA WILL BE PADDED WITH 0S.
!   ISIGN = SENSE OF FFT.  ALGORITHM IS
!     FFT (K) = SUM OVER J EXP { i ISIGN TWOPI/N J*K }
!     FOR USUAL CONVENTION,
!     FOR FORWARD FFT, ISIGN = - 1;
!     FOR INVERSE FFT, ISIGN = + 1.
!   NOTE THAT AFTER FORWARD AND INVERSE FFT, DATA IS EFFECTIVELY
!   MULTIPLIED BY N.

!   FIND THE SMALLEST POSSIBLE N AND ITS FACTORS.
      N = FFT_NFCTR(NLN)
!     VISIT = VISIT + 1
!     IF(VISIT < 10) THEN
!      WRITE(6,*) 'N=',n,' m2=',m2,' m3=',m3,' m4=',m4
!     ENDIF
!  THE NUMBER NFAC OF FACTORS AND THE SEQUENCE MFAC(J) OF FACTORS ARE
!  RETURNED IN THE COMMON BLOCK /NFCTRPA/

!   FACTOR REVERSAL STEP
      ND = 2*N
      NH = N/2
      IREV = 1

      DO IFWD = 1, ND, 2

!   IFWD IS DECOMPOSABLE AS
! IFWD = 1 + 2*[L(1)+MFAC(1)*[L(2)+MFAC(2)*[L(3)+...MFAC(NFAC-1)*L(NFAC)]..]]]
!   WHERE O <= L(J) < MFAC(J). THE SET OF DIGITS [ L(1), L(2), ..., L(NFAC) ]
!   THUS DESCRIBES THE NUMBER IFWD.
!   IREV IS THE NUMBER FORMED BY REVERSING THE ORDER OF THE DIGITS L:
! IREV = 1 + 2*[L(NFAC)+MFAC(NFAC)*[L(NFAC-1)+...+MFAC(2)*L(1)]..]].
!   THIS IS A GENERALIZATION OF RADIX TWO "BIT REVERSAL".  THE DATA MUST BE
!   MAPPED WITH ITS FACTORS REVERSED IN ORDER FOR THE FFT TO OUTPUT RESULTS
!   IN PROPER ORDER.
      IF (IREV < NLN*2) THEN
        BO(IFWD) = BI(IREV)
        BO(IFWD+1) = BI(IREV+1)
      ELSE
        BO(IFWD) = 0.
        BO(IFWD+1) = 0.
      ENDIF

!   FIND IREV FOR NEXT IFWD.  ADDING 2 TO IFWD BASICALLY MEANS ADDING 1
!   TO L(1) (WHICH ADDS 2*N/MFAC(1) TO IREV) UNLESS L(1) = MFAC(1) - 1,
!   IN WHICH CASE L(1) BECOMES 0 AND L(2) BECOMES L(2) + 1 ( WHICH ADDS
!   - 2*N/MFAC(1) * ( MFAC(1) - 1 - 1/MFAC(2) ) TO IREV ), UNLESS ETC.
      MPC = ND/MFAC(1)
      MPF = ND - MPC

      IF (IREV > MPF) THEN
        JFAC = 2
        IREV = IREV - MPF
        MPF = MPC
        MPC = MPC/MFAC(JFAC)
        MPF = MPF - MPC
        JFAC = JFAC + 1
        DO WHILE(JFAC<=NFAC .AND. IREV>MPF)
          IREV = IREV - MPF
          MPF = MPC
          MPC = MPC/MFAC(JFAC)
          MPF = MPF - MPC
          JFAC = JFAC + 1
        END DO
      ENDIF
      IREV = IREV + MPC
      END DO

!   BEGIN FFT
      NA = 1
!  CALCULATE EXPONENTS FOR RADIX 3 AND 5 FFTS
      TWOPI = DASIN(1.D0)*4.
      SGN = ISIGN
      IF (M3 > 0) THEN
      DARG = TWOPI/3.D0
      CS3 = DCOS(DARG)
      SN3 = ISIGN*DSIN(DARG)
      ENDIF
      IF (M5 > 0) THEN
      DARG = TWOPI/5.D0
      CS51 = DCOS(DARG)
      SN51 = ISIGN*DSIN(DARG)
      DARG = DARG + DARG
      CS52 = DCOS(DARG)
      SN52 = ISIGN*DSIN(DARG)
      ENDIF

!   ONE PASS IS REQUIRED THRU THE DATA FOR EACH FACTOR IN N
      DO IPASS = 1, NFAC
      M = MFAC(IPASS)
      NAD = 2*NA
      NAN = NA*M
      DARG = TWOPI/(NAN*ISIGN)
      DXPR = DCOS(DARG)
      DXPI = DSIN(DARG)
      XPR = 1.D0
      XPI = 0.D0

!   LOOP OVER K VALUES
      DO K = 1, NA

!   IF FACTOR FOR THIS PASS IS A TWO
        SELECT CASE (M)
        CASE (2)
          DO IND0 = K + K - 1, ND, NAD*2

            IND1 = IND0 + NAD
            TMPR = BO(IND1)*XPR - BO(IND1+1)*XPI
            TMPI = BO(IND1)*XPI + BO(IND1+1)*XPR

            BO(IND1) = BO(IND0) - TMPR
            BO(IND0) = BO(IND0) + TMPR

            BO(IND1+1) = BO(IND0+1) - TMPI
            BO(IND0+1) = BO(IND0+1) + TMPI
          END DO

!   IF FACTOR FOR THIS PASS IS A THREE
        CASE (3)
          XPR2 = XPR*XPR - XPI*XPI
          XPI2 = 2.D0*XPR*XPI
          DO IND0 = K + K - 1, ND, NAD*3

            IND1 = IND0 + NAD
            TR1 = BO(IND1)*XPR - BO(IND1+1)*XPI
            TI1 = BO(IND1)*XPI + BO(IND1+1)*XPR

            IND2 = IND1 + NAD
            TR2 = BO(IND2)*XPR2 - BO(IND2+1)*XPI2
            TI2 = BO(IND2)*XPI2 + BO(IND2+1)*XPR2

            TMPR = TR1 + TR2
            TMPI = TI1 - TI2
            TTR = BO(IND0) + TMPR*CS3
            TSR = TMPI*SN3
            BO(IND2) = TTR + TSR
            BO(IND1) = TTR - TSR
            BO(IND0) = BO(IND0) + TMPR

            TMPR = TR1 - TR2
            TMPI = TI1 + TI2
            TTR = BO(IND0+1) + TMPI*CS3
            TSR = TMPR*SN3
            BO(IND2+1) = TTR - TSR
            BO(IND1+1) = TTR + TSR
            BO(IND0+1) = BO(IND0+1) + TMPI
          END DO

!   IF FACTOR FOR THIS PASS IS FOUR
        CASE (4)
          XPR2 = XPR*XPR - XPI*XPI
          XPI2 = 2.D0*XPR*XPI
          XPR3 = XPR2*XPR - XPI2*XPI
          XPI3 = XPR2*XPI + XPI2*XPR

          DO IND0 = K + K - 1, ND, NAD*4

            IND1 = IND0 + NAD
            TR1 = BO(IND1)*XPR - BO(IND1+1)*XPI
            TI1 = BO(IND1)*XPI + BO(IND1+1)*XPR

            IND2 = IND1 + NAD
            TR2 = BO(IND2)*XPR2 - BO(IND2+1)*XPI2
            TI2 = BO(IND2)*XPI2 + BO(IND2+1)*XPR2

            IND3 = IND2 + NAD
            TR3 = BO(IND3)*XPR3 - BO(IND3+1)*XPI3
            TI3 = BO(IND3)*XPI3 + BO(IND3+1)*XPR3

            TTR = BO(IND0) - TR2
            TSR = SGN*(TI1 - TI3)
            BO(IND3) = TTR + TSR
            BO(IND1) = TTR - TSR

            TTR = BO(IND0+1) - TI2
            TSR = SGN*(TR1 - TR3)
            BO(IND3+1) = TTR - TSR
            BO(IND1+1) = TTR + TSR

            TTR = BO(IND0) + TR2
            TSR = TR1 + TR3
            BO(IND2) = TTR - TSR
            BO(IND0) = TTR + TSR

            TTR = BO(IND0+1) + TI2
            TSR = TI1 + TI3
            BO(IND2+1) = TTR - TSR
            BO(IND0+1) = TTR + TSR

          END DO

!   IF FACTOR FOR THIS PASS IS FIVE
        CASE (5)
          XPR2 = XPR*XPR - XPI*XPI
          XPI2 = 2.D0*XPR*XPI
          XPR3 = XPR2*XPR - XPI2*XPI
          XPI3 = XPR2*XPI + XPI2*XPR
          XPR4 = XPR2*XPR2 - XPI2*XPI2
          XPI4 = 2.D0*XPR2*XPI2

          DO IND0 = K + K - 1, ND, NAD*5

            IND1 = IND0 + NAD
            TR1 = BO(IND1)*XPR - BO(IND1+1)*XPI
            TI1 = BO(IND1)*XPI + BO(IND1+1)*XPR

            IND2 = IND1 + NAD
            TR2 = BO(IND2)*XPR2 - BO(IND2+1)*XPI2
            TI2 = BO(IND2)*XPI2 + BO(IND2+1)*XPR2

            IND3 = IND2 + NAD
            TR3 = BO(IND3)*XPR3 - BO(IND3+1)*XPI3
            TI3 = BO(IND3)*XPI3 + BO(IND3+1)*XPR3

            IND4 = IND3 + NAD
            TR4 = BO(IND4)*XPR4 - BO(IND4+1)*XPI4
            TI4 = BO(IND4)*XPI4 + BO(IND4+1)*XPR4

            TMPR = TR1 + TR4
            TMPI = TI1 - TI4
            TRBP = TR2 + TR3
            TIBM = TI2 - TI3

            TTR = BO(IND0) + TMPR*CS51 + TRBP*CS52
            TSR = TMPI*SN51 + TIBM*SN52
            BO(IND4) = TTR + TSR
            BO(IND1) = TTR - TSR

            TTR = BO(IND0) + TMPR*CS52 + TRBP*CS51
            TSR = TMPI*SN52 - TIBM*SN51
            BO(IND3) = TTR + TSR
            BO(IND2) = TTR - TSR

            BO(IND0) = BO(IND0) + TMPR + TRBP

            TMPR = TR1 - TR4
            TMPI = TI1 + TI4
            TRBP = TR2 - TR3
            TIBM = TI2 + TI3

            TTR = BO(IND0+1) + TMPI*CS51 + TIBM*CS52
            TSR = TMPR*SN51 + TRBP*SN52
            BO(IND4+1) = TTR - TSR
            BO(IND1+1) = TTR + TSR

            TTR = BO(IND0+1) + TMPI*CS52 + TIBM*CS51
            TSR = TMPR*SN52 - TRBP*SN51
            BO(IND3+1) = TTR - TSR
            BO(IND2+1) = TTR + TSR

            BO(IND0+1) = BO(IND0+1) + TMPI + TIBM

          END DO

!   ALL POSSIBLE FACTORS PROCESSED
        END SELECT
!   UPDATE EXPONENTIAL
        DTMP = XPR*DXPR - XPI*DXPI
        XPI = XPR*DXPI + XPI*DXPR
        XPR = DTMP

!   NEXT K VALUE
      END DO

!   NEXT PASS
      NA = NAN
      END DO

      NLN = N
      RETURN
      END SUBROUTINE FFT_CMFFT



!
! *********************************************************************
      SUBROUTINE FFT_RMFFT(BI, BO, N, ISIGN)
!-----------------------------------------------
!   M o d u l e s
!-----------------------------------------------
!...Translated by Pacific-Sierra Research 77to90  4.4E      09:07:05   8/10/99
!...Switches: olen=80 INDAL=2 -x6r
!-----------------------------------------------
!   I n t e r f a c e      B l o c k s
!-----------------------------------------------
      IMPLICIT NONE
!-----------------------------------------------
!   D u m m y      A r g u m e n t s
!-----------------------------------------------
      integer , INTENT(INOUT) :: N
      integer  :: ISIGN
      real  :: BI(*)
      real  :: BO(*)
!-----------------------------------------------
!   L o c a l      V a r i a b l e s
!-----------------------------------------------
      integer :: NFAC, M2, M3, M4, M5, MFAC
      COMMON /NFCTRPA/ NFAC, M2, M3, M4, M5, MFAC( 12 )
      integer ::  FFT_NFCTR


      integer :: NH, K, NN
      real :: OR, OI, ER, FR
      double precision ::      DXPR, DXPI, XPR, XPI, TWOPI, DARG, DTMP
!-----------------------------------------------
!
!   SUBROUTINE TO DO A REAL FFT OF LENGTH N.
!   IT WORKS BY CONVERTING THE DATA TO A COMPLEX ARRAY OF LENGTH N/2,
!   THEN CALLS FFT_CMFFT.
!
!   BI         =  INPUT ARRAY , LENGTH N  FOR FORWARD FFT, N+2 FOR INVERSE
!   BO         =  OUTPUT ARRAY, LENGTH N + 2 FOR FORWARD FFT, N FOR INVERSE
!   N        =  DESIRED LENGTH. IF NOT FACTORIZABLE BY 2S, 3S, 4S,
!           AND 5S,      WITH AT LEAST ONE FACTOR OF FOUR, N WILL BE
!           REPLACED BY THE SMALLEST SUCH NUMBER CONTAINING N AND
!           THE DATA WILL BE PADDED WITH ZEROS.
!   ISIGN   =  SIGN OF EXPONENT IN FFT.
!           ISIGN = - 1 FOR A FORWARD REAL TO COMPLEX FFT.
!           ISIGN = + 1 FOR AN INVERSE COMPLEX TO REAL FFT.

!  BASIC CONSTANTS
      TWOPI = DASIN(1.D0)*4.D0
      NH = (N + 1)/2


!  FORWARD FFT
      IF (ISIGN == (-1)) THEN
      CALL FFT_CMFFT (BI, BO, NH, ISIGN)
      N = NH*2
      DARG = -TWOPI/N
      BO(N+1) = BO(1) - BO(2)
      BO(N+2) = 0.
      BO(1) = BO(1) + BO(2)
      BO(2) = 0.
      BO(NH+2) = -BO(NH+2)
      DXPR = DCOS(DARG)
      DXPI = DSIN(DARG)
      XPR = DXPR*.5D0
      XPI = DXPI*.5D0
      DO K = 3, NH - 1, 2

        OR = BO(K+1) + BO(N+3-K)
        OI = BO(N+2-K) - BO(K)

        ER = (BO(K)+BO(N+2-K))*0.5
        FR = XPR*OR - XPI*OI
        BO(K) = ER + FR
        BO(N+2-K) = ER - FR

        ER = (BO(K+1)-BO(N+3-K))*0.5
        FR = XPI*OR + XPR*OI
        BO(K+1) = ER + FR
        BO(N+3-K) = (-ER) + FR

        DTMP = XPR*DXPR - XPI*DXPI
        XPI = XPR*DXPI + XPI*DXPR
        XPR = DTMP
      END DO
!  INVERSE COMPLEX TO REAL FFT
      ELSE IF (ISIGN == 1) THEN
      NN = 2*FFT_NFCTR(NH)
      IF (NN > N) THEN
        BI(N+3:NN+2) = 0.
        N = NN
        NH = N/2
      ENDIF
      DARG = TWOPI/N
      ER = BI(1) + BI(N+1)
      BI(2) = BI(1) - BI(N+1)
      BI(1) = ER
      BI(NH+1) = BI(NH+1)*2.
      BI(NH+2) = -BI(NH+2)*2.
      DXPR = DCOS(DARG)
      DXPI = DSIN(DARG)
      XPR = -DXPR
      XPI = -DXPI
      DO K = 3, NH - 1, 2

        OR = BI(K+1) + BI(N+3-K)
        OI = BI(N+2-K) - BI(K)

        ER = BI(K) + BI(N+2-K)
        FR = XPR*OR - XPI*OI
        BI(K) = ER + FR
        BI(N+2-K) = ER - FR

        ER = BI(K+1) - BI(N+3-K)
        FR = XPI*OR + XPR*OI
        BI(K+1) = ER + FR
        BI(N+3-K) = (-ER) + FR

        DTMP = XPR*DXPR - XPI*DXPI
        XPI = XPR*DXPI + XPI*DXPR
        XPR = DTMP
      END DO
      CALL FFT_CMFFT (BI, BO, NH, ISIGN)
      ELSE
      WRITE (*, *) ' ISIGN MUST BE PLUS OR MINUS ONE '
      ENDIF

      RETURN
      END SUBROUTINE FFT_RMFFT

!**********************************************************************
      integer  function FFT_NFCTR( N)
      integer :: N
      integer :: N2,N23,N235,M2R,M3R,M5R,J

      integer :: NFAC, M2, M3, M4, M5, MFAC
      COMMON /NFCTRPA/ NFAC, M2, M3, M4, M5, MFAC( 12 )
!
!  FUNCTION TO FIND THE SMALLEST EVEN PRODUCT OF 2S, 3S, 4S AND 5S
!  WHICH CONTAINS N.
!
!   CHECK FOR N SMALLER THAN 5
      IF(N.LT.5) THEN
       FFT_NFCTR = 4
       NFAC = 2
       M2 = 2
       M3 = 0
       M4 = 0
       M5 = 0
       MFAC(1) = 2
       MFAC(2) = 2
       RETURN
      END IF
!   STRATEGY:  EXAMINE ALL POSSIBLE COMBINATIONS, PICK THE SMALLEST
!
!  EXAMINE ALL FACTORS OF TWO, BEGINNING WITH 2
      FFT_NFCTR = N*2
      N2 = 1
      M2 = 0
      M4 = 0
  200 N2 = N2 * 2
      M2 = M2 + 1
!  FOR A GIVEN NUMBER OF TWOS, EXAMINE ALL POWERS OF THREE,
!  STARTING WITH 3^0.
       N23 = N2
       M3 = 0
       IF (N23.GE.N) GOTO 600

!  FOR A GIVEN NUMBER OF TWOS AND THREES, EXAMINE ALL POWERS OF FIVE,
!  STARTING WITH 5^0.
  300          N235 = N23
             M5 = 0
  500             N235 = N235 * 5
             M5 = M5 + 1
             IF(N235.LT.N) GOTO 500
          IF(N235.LT.FFT_NFCTR) THEN
             FFT_NFCTR = N235
             M2R = M2
             M3R = M3
             M5R = M5
          END IF
          N23 = N23 * 3
          M3 = M3 + 1
          M5 = 0
       IF (N23.LT.N) GOTO 300
  600 IF (N23.LT.FFT_NFCTR)      THEN
       FFT_NFCTR = N23
       M2R = M2
       M3R = M3
       M5R = M5
      END IF
      IF(N2.LT.N) GOTO 200
      M4 = M2R/2
      M2 = M2R      - M4*2
      M3 = M3R
      M5 = M5R
      NFAC = M2 + M3 + M4 + M5
      DO 680 J = 1, NFAC
      IF ( M5 .GE. J ) THEN
       MFAC(J) = 5
      ELSEIF ( M4 + M5 .GE. J ) THEN
       MFAC(J) = 4
      ELSEIF ( M3 + M4 + M5 .GE. J ) THEN
       MFAC(J) = 3
      ELSEIF ( M2 + M3 + M4 + M5 .GE. J ) THEN
       MFAC(J) = 2
      ELSE
       MFAC(J) = 0
      END IF
  680 CONTINUE
      RETURN
      END FUNCTION FFT_NFCTR
!!/FFT_RHS!
